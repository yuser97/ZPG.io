import { character} from './character.js';

export const items = {
    healthPotion: { name: '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è', effect: { health: 30 }, price: 15, type: 'consumable' },
    manaPotion: { name: '–ó–µ–ª—å–µ –º–∞–Ω—ã', effect: { mana: 40 }, price: 20, type: 'consumable' },
    scrollFire: { name: '–°–≤–∏—Ç–æ–∫ –æ–≥–Ω—è', effect: { damage: 50 }, price: 35, type: 'combat' },
    elixir: { name: '–≠–ª–∏–∫—Å–∏—Ä —Å–∏–ª—ã', effect: { strength: 2 }, price: 50, type: 'permanent' }
};

// –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
export function autoUseItems() {
    // –ê–≤—Ç–æ-–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–µ–ª–∏–π –∑–¥–æ—Ä–æ–≤—å—è
    if (character.health < character.maxHealth * 0.5) {
        const potion = character.inventory.find(i => i.name === '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è');
        if (potion) useItem(potion);
    }
    
    // –ê–≤—Ç–æ-–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–µ–ª–∏–π –º–∞–Ω—ã
    if (character.mana < character.maxMana * 0.4 && character.class === '–ú–∞–≥') {
        const potion = character.inventory.find(i => i.name === '–ó–µ–ª—å–µ –º–∞–Ω—ã');
        if (potion) useItem(potion);
    }
}

export function useItem(item) {
    const index = character.inventory.indexOf(item);
    if (index > -1) {
        character.inventory.splice(index, 1);
        
        if (item.effect.health) {
            character.health = Math.min(character.health + item.effect.health, character.maxHealth);
            addEvent(`üß™ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${item.name} (+${item.effect.health} HP)`);
        }
        if (item.effect.mana) {
            character.mana = Math.min(character.mana + item.effect.mana, character.maxMana);
            addEvent(`üß™ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${item.name} (+${item.effect.mana} –º–∞–Ω—ã)`);
        }
        if (item.effect.strength) {
            character.strength += item.effect.strength;
            addEvent(`‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${item.name} (+${item.effect.strength} —Å–∏–ª—ã)`);
        }
        
        updateStats();
    }
}

//–¢–æ—Ä–≥–æ–≤–ª—è
export function meetTrader() {
    setTimeout(() => {
        const itemKeys = Object.keys(items);
        const randomItem = items[itemKeys[Math.floor(Math.random() * itemKeys.length)]];
        const price = Math.floor(randomItem.price * (1 + Math.random() * 0.5));
        
        addEvent(`–¢–û–†–ì–û–í–ï–¶: –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç ${randomItem.name} –∑–∞ ${price} –º–æ–Ω–µ—Ç`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞
        if (shouldBuyItem(randomItem, price)) {
            // –ü—Ä–æ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –º–µ—Å—Ç–æ/–¥–µ–Ω—å–≥–∏
            while (character.coins < price || character.inventory.length >= character.maxInventory) {
                if (!sellWorstItem()) break;
            }
            
            if (character.coins >= price && character.inventory.length < character.maxInventory) {
                character.coins -= price;
                character.inventory.push({...randomItem});
                addEvent(`–ê–í–¢–û-–ü–û–ö–£–ü–ö–ê: –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω ${randomItem.name}`);
            }
        }      
    }, 20000);
}
export function shouldBuyItem(item, price) {
    const inventoryCount = character.inventory.filter(i => i.name === item.name).length;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ–∫—É–ø–∫–∏
    const buyPriorities = {
        '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è': character.health < character.maxHealth * 0.6,
        '–ó–µ–ª—å–µ –º–∞–Ω—ã': character.mana < character.maxMana * 0.5 && character.class === '–ú–∞–≥',
        '–≠–ª–∏–∫—Å–∏—Ä —Å–∏–ª—ã': true, // –í—Å–µ–≥–¥–∞ –ø–æ–∫—É–ø–∞—Ç—å
        '–°–≤–∏—Ç–æ–∫ –æ–≥–Ω—è': character.inventory.filter(i => i.name === '–°–≤–∏—Ç–æ–∫ –æ–≥–Ω—è').length < 2
    };
    
    return (buyPriorities[item.name] || false) && 
           price <= character.coins * 0.75 &&
           inventoryCount < 3;
}

export function sellWorstItem() {
    if (character.inventory.length === 0) return false;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø—Ä–æ–¥–∞–∂–∏ (–æ—Ç –Ω–∞–∏–º–µ–Ω–µ–µ –ø–æ–ª–µ–∑–Ω–æ–≥–æ)
    const sellPriority = [
        '–°–≤–∏—Ç–æ–∫ –æ–≥–Ω—è',
        '–ó–µ–ª—å–µ –º–∞–Ω—ã',
        '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è',
        '–≠–ª–∏–∫—Å–∏—Ä —Å–∏–ª—ã'
    ];
    
    // –ù–∞—Ö–æ–¥–∏–º —Ö—É–¥—à–∏–π –ø—Ä–µ–¥–º–µ—Ç
    let worstItem;
    for (const itemType of sellPriority) {
        worstItem = character.inventory.find(i => i.name === itemType);
        if (worstItem) break;
    }
    
    if (!worstItem) worstItem = character.inventory[0];
    
    // –ü—Ä–æ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    const sellPrice = Math.floor(worstItem.price * 0.7);
    character.coins += sellPrice;
    character.inventory.splice(character.inventory.indexOf(worstItem), 1);
    addEvent(`–ê–í–¢–û-–ü–†–û–î–ê–ñ–ê: –ü—Ä–æ–¥–∞–Ω ${worstItem.name} –∑–∞ ${sellPrice} –º–æ–Ω–µ—Ç`);
    
    return true;
}

export function findItem() {
    const rand = Math.random();
    if (rand < 0.4) {
        const coins = Math.floor(Math.random() * 30) + 10;
        character.coins += coins;
        addEvent(`${character.name} –Ω–∞—à–µ–ª ${coins} –º–æ–Ω–µ—Ç!`);
    } else {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –º–µ—Å—Ç–∞
        if (character.inventory.length >= character.maxInventory) {
            if (sellWorstItem()) {
                addEvent(`${character.name} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–∞–ª –ø—Ä–µ–¥–º–µ—Ç —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ!`);
            }
            return;
        }
        
        const itemKeys = Object.keys(items);
        const foundItem = items[itemKeys[Math.floor(Math.random() * itemKeys.length)]];
        character.inventory.push({...foundItem});
        addEvent(`${character.name} –Ω–∞—à–µ–ª ${foundItem.name}!`);
    }
}

export function train() {
    setTimeout(() => {     
        if (Math.random() < 0.5) {
            character.strength += 1;
            addEvent(`${character.name} —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç—Å—è —Å –º–µ—á–æ–º! –°–∏–ª–∞ +1.`);
        } else {
            character.magic += 1;
            addEvent(`${character.name} –∏–∑—É—á–∞–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è! –ú–∞–≥–∏—è +1.`);
        }
    }, 20000);
}