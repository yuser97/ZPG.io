import { character, checkLevelUp, showDeathMenu, hideDeathMenu, resurrectHero } from './character.js';
import { enemies, startBattle, attackCycle, calculateDamage } from './combat.js';
import { items, autoUseItems, useItem, meetTrader, shouldBuyItem, sellWorstItem, findItem, train} from './items.js';
import { LOCATIONS, autoChangeLocation, handleLocationEvent, updateMapDisplay } from './location.js';
import { QUEST_TITLES, handleQuests, generateNewQuest, checkQuestProgress } from './quests.js';

setInterval(() => {
    if (character.travelCooldown > 0) {
        character.travelCooldown--;
    }
}, 30000);

export let gameInterval;

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export function startGame() {
    const name = document.getElementById('nameInput').value;
    if (!name) return;
    
    character.name = name;
    document.getElementById('nameInput').remove();
    document.querySelector('button').remove();
    document.getElementById('GameStart').style.display = 'none';
    
    gameInterval = setInterval(gameLoop, 30000);
    updateStats();
    addEvent(`–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! ${character.name} –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.`);
};
character.turnsPassed = 0;
export function updateStats() {
    document.getElementById('questPercent').innerHTML = +character.turnsPassed * 100 / 500+'%';
    const statsDiv = document.getElementById('stats');
    const inventory = document.querySelector('#inventory')

    statsDiv.innerHTML = `
        <h3>–ü–µ—Ä—Å–æ–Ω–∞–∂: ${character.name}</h3>
        <p>–£—Ä–æ–≤–µ–Ω—å: ${character.level} (${character.xp}/${character.nextLevel} XP)</p>
        <p>–ö–ª–∞—Å—Å: ${character.class}</p>
        <p>–ú–æ–Ω–µ—Ç—ã: ${character.coins} ü™ô</p>
        <p>–°–∏–ª–∞: ${character.strength}</p>
        <p>–ú–∞–≥–∏—è: ${character.magic}</p>
        <p>–ó–¥–æ—Ä–æ–≤—å–µ: ${character.health}/${character.maxHealth}</p>
        ${character.class === '–ú–∞–≥' ? `<p>–ú–∞–Ω–∞: ${character.mana}/${character.maxMana}</p>` : ''}
        `;
    inventory.innerHTML = `
    <div class="inventory">
        <h4>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å (${character.inventory.length}/${character.maxInventory}):</h4>
        ${character.inventory.map(item => `<div class="item">${item.name}</div>`).join('')}
    </div>
    `
};

// C–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤
export const warriorAbilities = {
    '–ú–æ—â–Ω—ã–π —É–¥–∞—Ä': {
        chance: 0.3,
        damageMultiplier: 2.5,
        description: '–®–∞–Ω—Å 30% –Ω–∞–Ω–µ—Å—Ç–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä'
    },
    '–Ø—Ä–æ—Å—Ç—å': {
        chance: 0.2,
        heal: 15,
        description: '–®–∞–Ω—Å 20% –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 15 HP'
    }
};

export const mageAbilities = {
    '–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä': {
        chance: 0.4,
        damageMultiplier: 3,
        manaCost: 30,
        description: '–®–∞–Ω—Å 40% –≤—ã–ø—É—Å—Ç–∏—Ç—å –æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä (—Å—Ç–æ–∏–º–æ—Å—Ç—å 30 –º–∞–Ω—ã)'
    },
    '–ò—Å—Ü–µ–ª–µ–Ω–∏–µ': {
        chance: 0.25,
        heal: 25,
        manaCost: 20,
        description: '–®–∞–Ω—Å 25% –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 25 HP (—Å—Ç–æ–∏–º–æ—Å—Ç—å 20 –º–∞–Ω—ã)'
    }
};

export function getAbilityDescriptions() {
    if (character.class === '–í–æ–∏–Ω') {
        return Object.entries(warriorAbilities).map(([name, config]) => 
            `<p><strong>${name}:</strong> ${config.description}</p>`
        ).join('');
    }
    if (character.class === '–ú–∞–≥') {
        return Object.entries(mageAbilities).map(([name, config]) => 
            `<p><strong>${name}:</strong> ${config.description}</p>`
        ).join('');
    }
    return '';
};

export function addEvent(text) {
    const eventPanel = document.getElementById('eventPanel');
    const events = eventPanel.getElementsByClassName('event');

    // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å 10
    if (events.length >= 10) events[0].remove();
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const eventDiv = document.createElement('div');
    eventDiv.className = 'event';
    eventDiv.textContent = text;
    eventPanel.appendChild(eventDiv);

    // –ê–≤—Ç–æ-—Å–∫—Ä–æ–ª–ª –∫ –Ω–æ–≤–æ–º—É —Å–æ–±—ã—Ç–∏—é
    eventPanel.scrollTop = eventPanel.scrollHeight;
};



export function handleRandomEvent() {
        const events = [
            {
                type: 'train',
                weight: 0.65,
                action: () => train()
            },
            {
                type: 'battle',
                weight: 0.5,
                action: () => startBattle()
            },
            {
                type: 'treasure',
                weight: 0.3,
                action: () => {
                    const dangerLevel = LOCATIONS[character.location].danger;
                    const coins = 20 + dangerLevel * 15;
                    character.coins += coins;
                    addEvent(`–ù–∞–π–¥–µ–Ω –∫–ª–∞–¥! –ü–æ–ª—É—á–µ–Ω–æ ${coins} –º–æ–Ω–µ—Ç`);
                } 
            },
            {
                type: 'trader',
                weight: 0.1,
                action: () => meetTrader()
            }
        ];
        const totalWeight = events.reduce((sum, e) => sum + e.weight, 0);
        const random = Math.random() * totalWeight;
        
        let cumulative = 0;
        for (const event of events) {
            cumulative += event.weight;
            if (random < cumulative) {
                event.action();
                break;
            }
        }
};

// –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
export function gameLoop() {
    const dangerLevel = LOCATIONS[character.location].danger;
    if (!character.isAlive) {
        character.turnsPassed = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏
        return;
    }
    if (!character.isAlive || character.isInBattle) return;
    
    if (character.travelCooldown === 0) {
        autoChangeLocation();
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –≥–æ—Ä–æ–¥–µ
    if (character.location === 'city') {
        character.health = Math.min(character.health + 15, character.maxHealth);
        character.mana = Math.min(character.mana + 25, character.maxMana);
    }
    
    // –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–∫–∞—Ü–∏–∏
    if (character.location !== 'city') {
        if (Math.random() < 0.3 + dangerLevel * 0.2) handleRandomEvent();
    }

    // –ê–≤—Ç–æ-–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–æ—Ä–æ–¥ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ
    if (character.health < character.maxHealth * 0.95 && character.location !== 'city') {
        addEvent(`‚ùó${character.name} —Å–ø–µ—à–∏—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥ –¥–ª—è –ª–µ—á–µ–Ω–∏—è!`);
    }
        character.turnsPassed++;
        handleQuests();
        checkLevelUp();
        autoUseItems();
        updateStats();
};

document.addEventListener('DOMContentLoaded', () => {
    const tabs = document.querySelectorAll('.navigation button');
    const tabContents = document.querySelectorAll('.tab-content');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–∞–º
    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            tabs.forEach(t => t.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));

            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
            tab.classList.add('active');
            const targetTab = tab.getAttribute('data-tab');
            document.getElementById(targetTab).classList.add('active');
        });
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
    tabs[0].click();
});
